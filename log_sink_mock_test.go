// Code generated by go-mockgen 0.1.0; DO NOT EDIT.

package log

import (
	"sync"
	"time"
)

// MockLogSink is a mock implementation of the logSink interface (from the
// package github.com/go-nacelle/log) used for unit testing.
type MockLogSink struct {
	// LogFunc is an instance of a mock function object controlling the
	// behavior of the method Log.
	LogFunc *LogSinkLogFunc
}

// NewMockLogSink creates a new mock of the logSink interface. All methods
// return zero values for all results, unless overwritten.
func NewMockLogSink() *MockLogSink {
	return &MockLogSink{
		LogFunc: &LogSinkLogFunc{
			defaultHook: func(time.Time, LogLevel, LogFields, string) error {
				return nil
			},
		},
	}
}

// surrogateMockLogSink is a copy of the logSink interface (from the package
// github.com/go-nacelle/log). It is redefined here as it is unexported in
// the source packge.
type surrogateMockLogSink interface {
	Log(time.Time, LogLevel, LogFields, string) error
}

// NewMockLogSinkFrom creates a new mock of the MockLogSink interface. All
// methods delegate to the given implementation, unless overwritten.
func NewMockLogSinkFrom(i surrogateMockLogSink) *MockLogSink {
	return &MockLogSink{
		LogFunc: &LogSinkLogFunc{
			defaultHook: i.Log,
		},
	}
}

// LogSinkLogFunc describes the behavior when the Log method of the parent
// MockLogSink instance is invoked.
type LogSinkLogFunc struct {
	defaultHook func(time.Time, LogLevel, LogFields, string) error
	hooks       []func(time.Time, LogLevel, LogFields, string) error
	history     []LogSinkLogFuncCall
	mutex       sync.Mutex
}

// Log delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockLogSink) Log(v0 time.Time, v1 LogLevel, v2 LogFields, v3 string) error {
	r0 := m.LogFunc.nextHook()(v0, v1, v2, v3)
	m.LogFunc.appendCall(LogSinkLogFuncCall{v0, v1, v2, v3, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Log method of the
// parent MockLogSink instance is invoked and the hook queue is empty.
func (f *LogSinkLogFunc) SetDefaultHook(hook func(time.Time, LogLevel, LogFields, string) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Log method of the parent MockLogSink instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *LogSinkLogFunc) PushHook(hook func(time.Time, LogLevel, LogFields, string) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *LogSinkLogFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(time.Time, LogLevel, LogFields, string) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *LogSinkLogFunc) PushReturn(r0 error) {
	f.PushHook(func(time.Time, LogLevel, LogFields, string) error {
		return r0
	})
}

func (f *LogSinkLogFunc) nextHook() func(time.Time, LogLevel, LogFields, string) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *LogSinkLogFunc) appendCall(r0 LogSinkLogFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of LogSinkLogFuncCall objects describing the
// invocations of this function.
func (f *LogSinkLogFunc) History() []LogSinkLogFuncCall {
	f.mutex.Lock()
	history := make([]LogSinkLogFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// LogSinkLogFuncCall is an object that describes an invocation of method
// Log on an instance of MockLogSink.
type LogSinkLogFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 time.Time
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 LogLevel
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 LogFields
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c LogSinkLogFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c LogSinkLogFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}
